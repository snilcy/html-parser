{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/parser/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger as log } from \"../logger.js\";\nimport { Char } from \"../const.js\";\nimport { CharToGroup } from \"./const.js\";\nimport {\n  ICharGroupName,\n  ICharGroupConfig,\n  ICharToGroupSection,\n  ICharGroupMatch,\n} from \"./types.js\";\nimport { Node } from \"./node.js\";\nimport { Container } from \"./container.js\";\nimport { Group } from \"./group.js\";\nimport { Text } from \"./text.js\";\n\nexport class Parser {\n  public tree = new Container(null as unknown as Container);\n  public nodes: Node[] = [this.tree];\n\n  private head: Node = this.tree;\n  private i = 0;\n\n  constructor(public raw: string, public config: ICharGroupConfig) {\n    this.parse();\n  }\n\n  public isRoot(target: Node) {\n    return !target.parent;\n  }\n\n  public isText(target: Node): target is Text {\n    return target instanceof Text;\n  }\n\n  public isGroup(target: Node): target is Group {\n    return target instanceof Group;\n  }\n\n  public isContainer(target: Node): target is Container {\n    return target instanceof Container;\n  }\n\n  private get prevChar() {\n    return this.raw[this.i - 1];\n  }\n\n  private get char() {\n    return this.raw[this.i];\n  }\n\n  private closeGroup(group: Group) {\n    group.closed = true;\n\n    this.shiftIterator(group.closeChars);\n    this.head = group.parent;\n  }\n\n  private closeGroupHandler(): boolean {\n    const groups = this.getGroupNameMatchs(CharToGroup.close);\n    if (!groups.length) return false;\n\n    const parent = this.isText(this.head) ? this.head.parent : this.head;\n\n    // log.info(\"closeGroupHandler\", this.char, groups, parent);\n    if (this.isGroup(parent) && groups.matchs[parent.groupName]) {\n      this.closeGroup(parent);\n      return true;\n    }\n\n    return false;\n  }\n\n  private shiftIterator(group: string) {\n    this.i += group.length - 1;\n  }\n\n  private getGroupNameMatchs(list?: ICharToGroupSection) {\n    let i = this.i;\n    let char = this.char;\n    const withEscape = this.prevChar === Char.SLACH_BACK;\n\n    const result: ICharGroupMatch = {\n      matchs: {},\n      length: 0,\n    };\n\n    if (withEscape) {\n      return result;\n    }\n\n    while (list && list[char]) {\n      const groupName = list[char].groupName;\n\n      if (groupName) {\n        result.matchs[groupName] = true;\n        result.longest =\n          groupName.length > (result.longest || \"\").length\n            ? groupName\n            : result.longest;\n        result.length++;\n      }\n      list = list[char].inner;\n      char = this.raw[++i];\n    }\n\n    return result;\n  }\n\n  private openGroup(groupName: ICharGroupName) {\n    const parent = this.isText(this.head) ? this.head.parent : this.head;\n\n    if (!this.isContainer(parent)) return;\n\n    const groupConfig = this.config.groups[groupName];\n    const group = new Group(parent, groupName, groupConfig);\n\n    parent.childrens.push(group);\n    group.parent = parent;\n\n    this.shiftIterator(group.openChars);\n    this.head = group;\n    this.nodes.push(group);\n  }\n\n  private openGroupHandler(): boolean {\n    const groups = this.getGroupNameMatchs(CharToGroup.open);\n\n    if (!groups.longest) return false;\n\n    const parent = this.isText(this.head) ? this.head.parent : this.head;\n\n    if (this.isGroup(parent)) {\n      if (parent.includes(groups.longest)) {\n        this.openGroup(groups.longest);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    if (this.isRoot(parent)) {\n      if (this.config.root[groups.longest]) {\n        this.openGroup(groups.longest);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private textHandler() {\n    if (this.isContainer(this.head)) {\n      const parent = this.head;\n      const text = new Text(parent);\n\n      parent.childrens.push(text);\n\n      this.nodes.push(text);\n      this.head = text;\n    }\n\n    if (this.isText(this.head)) {\n      this.head.addChar(this.char);\n    }\n  }\n\n  private listHandler(): boolean {\n    if (this.isGroup(this.head)) {\n      log.info(this.head.groupName, this.char);\n    }\n\n    return false;\n  }\n\n  private parse() {\n    for (this.i = 0; this.i < this.raw.length; this.i++) {\n      if (this.closeGroupHandler()) continue;\n      if (this.openGroupHandler()) continue;\n      if (this.listHandler()) continue;\n\n      this.textHandler();\n    }\n  }\n}\n"]}